name: Cypress Tests with Report and Notification on TEAMS

on:
  workflow_dispatch:

jobs:
  cypress-tests:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm install

      - name: Install Cypress and reporter
        run: npm install cypress cypress-mochawesome-reporter

      - name: Run Cypress tests with Mochawesome
        id: cypress_run
        env:
          CYPRESS_EMAIL: ${{ secrets.CYPRESS_EMAIL }}
          CYPRESS_PASSWORD: ${{ secrets.CYPRESS_PASSWORD }}
        run: |
          # Run Cypress and store the output
          npx cypress run --env email=$CYPRESS_EMAIL,password=$CYPRESS_PASSWORD --reporter mochawesome --reporter-options "reportDir=cypress/reports,overwrite=false,html=true,json=true" > cypress-output.txt 2>&1
          exit_code=$?
          
          # Store the exit code
          echo "exit_code=$exit_code" >> $GITHUB_OUTPUT

      - name: Extract test results
        id: test_results
        run: |
          # Initialize variables
          TOTAL=0
          PASSED=0
          FAILED=0
          PENDING=0
          
          # Read the Mochawesome JSON report
          if [ -f "cypress/reports/mochawesome.json" ]; then
            # Use jq to parse the JSON and extract test counts
            TOTAL=$(jq '.stats.tests' cypress/reports/mochawesome.json)
            PASSED=$(jq '.stats.passes' cypress/reports/mochawesome.json)
            FAILED=$(jq '.stats.failures' cypress/reports/mochawesome.json)
            PENDING=$(jq '.stats.pending' cypress/reports/mochawesome.json)
          else
            echo "Warning: mochawesome.json not found, falling back to log parsing"
            # Fallback to log parsing if JSON not found
            TOTAL=$(grep -c '"state": "passed\|failed\|pending"' cypress/reports/*.json 2>/dev/null || echo "0")
            PASSED=$(grep -c '"state": "passed"' cypress/reports/*.json 2>/dev/null || echo "0")
            FAILED=$(grep -c '"state": "failed"' cypress/reports/*.json 2>/dev/null || echo "0")
            PENDING=$(grep -c '"state": "pending"' cypress/reports/*.json 2>/dev/null || echo "0")
          fi
          
          # Export the values
          echo "TOTAL=$TOTAL" >> $GITHUB_ENV
          echo "PASSED=$PASSED" >> $GITHUB_ENV
          echo "FAILED=$FAILED" >> $GITHUB_ENV
          echo "PENDING=$PENDING" >> $GITHUB_ENV
          
          # Debug output
          echo "Test Results:"
          echo "Total: $TOTAL"
          echo "Passed: $PASSED"
          echo "Failed: $FAILED"
          echo "Pending: $PENDING"

      - name: Generate merged report
        if: always()
        run: |
          if ls cypress/reports/*.json 1>/dev/null 2>&1; then
            npx mochawesome-merge cypress/reports/*.json > cypress/reports/full_report.json
            npx marge cypress/reports/full_report.json -f report -o cypress/reports
          else
            echo "No JSON reports found. Skipping merge."
          fi

      - name: Upload test reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: cypress-reports
          path: |
            cypress/reports
            cypress/screenshots
            cypress/videos
          retention-days: 30
          if-no-files-found: warn

      - name: Process and send results to Teams
        if: always()
        env:
          TEAMS_WEBHOOK_URL: ${{ secrets.TEAMS_WEBHOOK_URL }}
        run: |
          # Read values from environment
          TOTAL="${TOTAL:-0}"
          PASSED="${PASSED:-0}"
          FAILED="${FAILED:-0}"
          PENDING="${PENDING:-0}"
          
          # Calculate success rate
          if [ "$TOTAL" -eq 0 ]; then
            SUCCESS_RATE="0.00"
          else
            SUCCESS_RATE=$(echo "scale=2; ($PASSED * 100)/$TOTAL" | bc)
          fi

          # Determine status color
          if [ "$FAILED" -eq 0 ]; then
            COLOR="good"
            STATUS="✅ Success"
          else
            COLOR="attention"
            STATUS="❌ Failed"
          fi

          # Create Teams message card
          curl -H "Content-Type: application/json" -X POST -d '{
            "type": "message",
            "attachments": [{
              "contentType": "application/vnd.microsoft.card.adaptive",
              "content": {
                "type": "AdaptiveCard",
                "body": [{
                  "type": "TextBlock",
                  "size": "Large",
                  "weight": "Bolder",
                  "text": "Cypress Test Results",
                  "color": "'"$COLOR"'"
                },
                {
                  "type": "TextBlock",
                  "text": "'"$STATUS"'",
                  "weight": "Bolder",
                  "color": "'"$COLOR"'"
                },
                {
                  "type": "FactSet",
                  "facts": [
                    { "title": "Total Tests", "value": "'"$TOTAL"'" },
                    { "title": "Passed", "value": "'"$PASSED"'" },
                    { "title": "Failed", "value": "'"$FAILED"'" },
                    { "title": "Pending", "value": "'"$PENDING"'" },
                    { "title": "Success Rate", "value": "'"$SUCCESS_RATE"'%" }
                  ]
                }],
                "$schema": "http://adaptivecards.io/schemas/adaptive-card.json",
                "version": "1.2"
              }
            }]
          }' $TEAMS_WEBHOOK_URL
